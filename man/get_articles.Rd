% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/articles_wrapper.R
\name{get_articles}
\alias{get_articles}
\title{Retrieve Articles from Multiple Bibliographic APIs}
\usage{
get_articles(
  ids = NULL,
  query = NULL,
  year_filter = NULL,
  filters = NULL,
  fields = NULL,
  per_page = 100,
  max_results = Inf,
  include_raw = FALSE,
  sources = c("crossref", "openalex", "pubmed", "semanticscholar")
)
}
\arguments{
\item{ids}{Optional character vector of article identifiers (DOI, PMID,
PMCID, OpenAlex ID, or Semantic Scholar ID). Only one of \code{ids} or \code{query}
must be supplied.}

\item{query}{Optional character string with a free-text search query. Only
one of \code{ids} or \code{query} must be supplied.}

\item{year_filter}{Publication year or range (e.g. \code{"2020"},
\code{"2018-2020"}, \code{"2019-"}, \code{"-2015"}). See the individual API helpers for
additional details.}

\item{filters}{A named list of additional filters. Not every API supports
custom filters; unsupported entries are ignored with a warning.}

\item{fields}{Character vector of fields to request. Unsupported fields for
a given backend are silently ignored by that backend.}

\item{per_page}{Integer indicating the requested page size. The effective
limit is capped internally by each backend (Crossref 1000, OpenAlex 200,
PubMed 10000, Semantic Scholar 100).}

\item{max_results}{Maximum number of total results to retrieve per backend.}

\item{include_raw}{Logical. When \code{TRUE}, the raw XML returned by PubMed is
kept in a \code{raw_xml} list column for records coming from that source.}

\item{sources}{Character vector specifying which back-ends to query.
Any combination of \code{c("crossref", "openalex", "pubmed", "semanticscholar")} is allowed. Defaults to all.}
}
\value{
A data frame with the union of results returned by the selected
back-ends. Duplicate records (identified primarily through the DOI, then
PMID, then OpenAlex ID) are merged. The column \code{.source} stores, for each
record, the vector of contributing back-ends.
}
\description{
This high-level helper wraps the package‚Äêlevel functions
\code{get_crossref_articles()}, \code{get_openalex_articles()},
\code{get_pubmed_articles()}, and \code{get_semanticscholar_articles()}.
It offers a unified interface that accepts the most common arguments and
returns a de-duplicated data frame combining the results from all selected
sources.
}
\details{
When merging duplicate records, for each column the first non-missing and
non-empty value is retained. For list-columns the union of unique elements is
returned. If conflicting scalar values are present the value from the first
encountered backend (in the order supplied by \code{sources}) wins.

Parallel execution is performed with \code{safe_mirai_map()}. If no \code{mirai}
daemons are running the function falls back to sequential evaluation.
}
\examples{
\dontrun{
# Fetch one article by DOI across all APIs
get_articles(ids = "10.1037/0003-066X.59.1.29")

# Search by query string
get_articles(query = "machine learning", year_filter = "2020")

# Limit to Crossref and OpenAlex only
get_articles(query = "deep learning", sources = c("crossref", "openalex"))
}

}
