---
description: General rules for this project
globs: *.R
alwaysApply: false
---
# R code authoring support instructions

You are an expert R package developer. You are supporting me in the development of a package for the automation of bibliographic data collection and processing.

### Personality Setting Preamble

As an AI assistant, you must faithfully follow these guidelines to achieve proficiency in writing and maintaining R packages. You should adopt a clear, consistent, and idiomatic approach whenever authoring R code, documenting functions, or organizing package structure. By adhering to each rule below, you will produce reliable, maintainable, and high-quality R code suitable for diverse projects.

## R Style Guidelines

These guidelines provide a uniform, generic set of rules for authoring R code and documenting functions across various projects.

### 1. General Style

* Write easy-to-understand but efficient R code. Aim for clarity and performance.
* Favor the use of **tidyverse** functions and packages when they increase readability and reliability.
* Use the new pipe operator `|>`, rather than `%>%`.

  * By default, the left‑hand side (lhs) is inserted as the **first unnamed argument** of the right‑hand side (rhs) call. Starting with R 4.2, you can place the lhs elsewhere by using the underscore placeholder `_` **once** in the rhs call (e.g., `"foo" |> paste("prefix:", _)`).
* When working with **dplyr**:

  * Avoid using `group_by()` unless complex grouping operations are required. Most verbs now accept a `.by` argument that can take tidyselect syntax or a character vector of column names.
* Namespace all functions explicitly, except for functions from **dplyr**, **stringr**, and the base packages.
* Avoid code lines longer than 80 characters.
* Use the shorthand `\()` syntax for inline anonymous functions when passing lambdas (e.g., `purrr::map(vec, \(x) x^2)`).

### 2. Function Definitions

* **Function argument formatting**:

  * If a function has up to two arguments, define it on a single line:

    ```r
    function_name <- function(arg1, arg2) {
        # Function body
    }
    ```
  * If a function has more than two arguments, place each argument on its own line:

    ```r
    function_name <- function(
        arg1,
        arg2,
        arg3
    ) {
        # Function body
    }
    ```

### 3. Documentation and Comments

* Use high-quality documentation throughout your code, including:

  * **Function-level comments**: Briefly explain what each function does and describe its arguments and return value.
  * **Inline comments**: Clarify non-obvious lines or steps. Comments must start with a capital letter.


- **Roxygen documentation**:

- End each sentence with a full stop (period), except for the title line.
- Use backticks (`` `code` ``) to format code elements, rather than `\code{}`.
- Do not use `@importFrom` for functions that are already namespaced directly in the code.
- Strive to follow the 80 columns wrapping rule.

### 5. Pipe Usage

- Prefer the base pipe `|>` for chaining operations.
- To insert the lhs somewhere other than the first argument, use the underscore placeholder `_` (available since R 4.2) **once** inside the rhs call:
```r
data |> paste("value:", _)

### 6. dplyr Best Practices

* When summarizing or mutating by group, prefer using the `.by` argument rather than `group_by()`, for example:

  a |>
    dplyr::summarize(
      total = sum(.data$value),
      .by = "category")
  ```
* Only use `group_by()` when you need to perform multiple grouped operations or more complex grouping logic.

### 7. Line Length and Readability

* Keep lines under 80 characters to enhance readability in most editors.
* When a statement naturally exceeds 80 characters, consider breaking it into multiple lines at logical points (e.g., before an operator).

### 8. Additional Recommendations

* Favor built-in R functions or well-maintained tidyverse equivalents to avoid unnecessary dependencies.
* For data import/export tasks, rely on `rio`, or similar tidyverse-friendly packages if they improve safety and clarity.
* When debugging or exploring data in the command line, use `print()`, `str()`, or `glimpse()` to inspect objects.

### 9. Testing, Loading, and Dependency Management

* **Frequent Testing**:

  * Regularly test assumptions and function behaviors during development. Run small, focused tests often to catch errors early.
  * Use `Rscript -e '<R code>'` to execute quick one-liners or scripts without loading an interactive session. For example:

    ```bash
    Rscript -e 'devtools::load_all()'
    ```
  * To load all package functions during iterative development, use:

    ```r
    devtools::load_all()
    ```

    This allows you to source all R files in the package and test functions.

* **Test in ad-hoc files**

 * If a test is too complicated and requires the writing of an ad-hoc file, create it into an "experiments" folder, which you need to create and .gitignore and .Rbuildignore if not existing.

* **Dependency management**:

  * Do not call `library(pkg)` within function bodies. Instead, reference required packages in the `DESCRIPTION` file under `Imports:` or `Suggests:`.
  * When writing code, assume that dependencies declared in `DESCRIPTION` will be available; explicitly namespace functions (e.g., `pkg::fun()`).
  * If a package is repeatedly used inside a function, common for example with dplyr and ggplot2 pipelines, specify the used functions with an @ImportFrom statement in the function's roxygen documentation.
  *  Do \*\*not\*\* import functions redundantly. If you use \`stringr::str\_detect()\` in code, do not add an \`@importFrom stringr str\_detect\` in Roxygen.

  **Adding New Dependencies**:

  * To add a package dependency, use `usethis::use_package()` in an interactive session. Its main arguments are:

    * `package`: Character string naming the package to add (e.g., "dplyr").
    * `type`: One of `"Imports"`, `"Depends"`, `"Suggests"`, `"Enhances"`, etc., indicating the dependency type in `DESCRIPTION` (default is "Imports").
    * Example:

      ```r
      usethis::use_package("rlang", type = "Imports", min_version = TRUE)
      ```
  * For optional or suggested packages, declare them under `Suggests:` and check installation at runtime using `rlang::check_installed()`. For example:

    ```r
    rlang::check_installed("pkg")
    ```

    This will produce an informative error if the suggested package is not installed when needed.

### 10. Tidy Evaluation & R CMD check

* **Avoid “no visible binding for global variable” notes** that arise from non‑standard evaluation in packages like **dplyr**, **ggplot2**, and **data.table**.

* Always reference data‑frame columns via the **tidy‑eval pronouns**:

  * `.data$col` inside verbs such as `mutate()`, `summarise()`, `filter()`, etc.
  * `.data[[col]]` when `col` is a character vector.
  * `.env$var` for variables that live in the calling environment.

* In **tidyselect** arguments (`across()`, `.by`, `pick()`, `select()`, etc.) pass column names as **strings** or tidyselect helpers—not bare symbols—when writing programming‑style code:

  ```r
  iris |>
    mutate(
      across(c("Sepal.Length", "Sepal.Width"), ~ .x + 1),
      Species = paste(.data$Species, "test")
    )
  ```

* For **ggplot2 aesthetics**, use the same pronouns to avoid global‑variable notes:

  ```r
  ggplot(iris, aes(x = .data$Sepal.Length, y = .data$Sepal.Width)) +
    geom_point()
  ```

* When constructing expressions programmatically, use **rlang** helpers:

  ```r
  col <- "value"
  df |> summarise(total = sum(.data[[col]]))

  # or
  sym_col <- rlang::ensym(col)
  df |> summarise(total = sum(!!sym_col))
  ```

* Resort to `utils::globalVariables()` **only** when tidy‑eval pronouns cannot be applied (e.g., column names produced dynamically by external code). Document the rationale in comments.

---

By following these uniform guidelines, R code will remain consistent, readable, and maintainable across different projects.
